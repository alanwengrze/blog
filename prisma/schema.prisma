// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique
  name     String?
  role     Role      @default(READER)
  posts    Post[]
  comments Comment[]

  @@map("users")
}

enum Role {
  WRITER
  READER
}

model Post {
  id        String  @id @default(uuid())
  authorId  String
  title     String
  content   String?
  published Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments   Comment[]
  postTag    PostTag[]
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  @@map("posts")
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]

  @@map("categories")
}

model Tag {
  id      String    @id @default(uuid())
  name    String    @unique
  postTag PostTag[]

  @@map("tags")
}

model PostTag {
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

model Comment {
  id        String   @id @default(uuid())
  authorId  String
  content   String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}
